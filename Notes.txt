http://playground.tensorflow.org/
https://drive.google.com/file/d/1o0B3sPwiC8aCp4a_locFfSD9753CA-tm/view
https://drive.google.com/file/d/1aHH4uDIb5SPe3DXLd_capSREkoj77Cdn/view
https://www.youtube.com/watch?v=GNDh64aa-vA&feature=youtu.be


SGD with momentum
-----------------
https://towardsdatascience.com/stochastic-gradient-descent-with-momentum-a84097641a5d
https://ruder.io/optimizing-gradient-descent/
https://www.slideshare.net/SebastianRuder/optimization-for-deep-learning


https://www.youtube.com/watch?v=oJlb4jBbKWw&list=PLyqSpQzTE6M-_1jAqrFCsgCcuTYm_2urp
https://en.wikipedia.org/wiki/Autoencoder
http://ufldl.stanford.edu/tutorial/unsupervised/Autoencoders/
https://arxiv.org/pdf/1412.6980.pdf
https://blog.paperspace.com/intro-to-optimization-momentum-rmsprop-adam/


https://www.appliedaicourse.com/lecture/11/applied-machine-learning-online-course/3386/word2vec-cbow/8/module-8-neural-networks-computer-vision-and-deep-learning
https://www.appliedaicourse.com/lecture/11/applied-machine-learning-online-course/3395/word2vec-skip-gram/8/module-8-neural-networks-computer-vision-and-deep-learning
https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/
http://mccormickml.com/2017/01/11/word2vec-tutorial-part-2-negative-sampling/
https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/


Tensorflow and Keras:
--------------------

https://cloud.google.com/blog/products/ai-machine-learning/learn-tensorflow-and-deep-learning-without-a-phd
https://www.tensorflow.org/learn
https://learningtensorflow.com/
https://www.tensorflow.org/install/source_windows
https://research.google.com/colaboratory/faq.html
https://www.tensorflow.org/tutorials/quickstart/beginner


ConvNets:
--------

https://en.wikipedia.org/wiki/David_H._Hubel#Research
https://www.youtube.com/watch?v=v20-E_2bT2c
https://www.frontiersin.org/files/Articles/34845/fpsyg-04-00124-HTML/image_m/fpsyg-04-00124-g001.jpg
http://www.cns.nyu.edu/~david/courses/perception/lecturenotes/what-where/what-where.html


https://en.wikipedia.org/wiki/Grayscale#/media/File:Beyoglu_4671_tricolor.png
https://en.wikipedia.org/wiki/Sobel_operator
https://upload.wikimedia.org/wikipedia/commons/3/3f/Bikesgray.jpg
https://upload.wikimedia.org/wikipedia/commons/1/17/Bikesgraysobel.jpg

Max pooling:
https://www.quora.com/How-are-the-parameters-of-max-pooling-represented-in-the-weights-nodes-of-a-neural-network
https://medium.com/@2017csm1006/forward-and-backpropagation-in-convolutional-neural-network-4dfa96d7b37e
https://cs231n.github.io/convolutional-networks/#pool
http://www.iro.umontreal.ca/~bengioy/talks/DL-Tutorial-NIPS2015.pdf

LeNet:
------
https://en.wikipedia.org/wiki/LeNet#:~:text=LeNet%20is%20a%20convolutional%20neural,a%20simple%20convolutional%20neural%20network.
https://web.archive.org/web/20201126174628/https://engmrk.com/lenet-5-a-classic-cnn-architecture/

ConvNets with Keras:
--------------------
https://www.snorkel.org/blog/tanda
https://keras.io/api/layers/convolution_layers/
https://keras.io/api/layers/pooling_layers/
https://keras.io/api/layers/core_layers/#flatten
https://github.com/DustinAlandzes/mnist-lenet-keras/blob/master/lenet.py

AlexNet:
-------
https://papers.nips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf
https://i0.wp.com/ramok.tech/wp-content/uploads/2017/12/2017-12-31_01h31_40.jpg
http://euler.stat.yale.edu/~tba3/stat665/lectures/lec18/notebook18.html

VGGNet:
--------
https://github.com/fchollet/deep-learning-models/blob/master/vgg16.py
https://www.quora.com/What-is-the-VGG-neural-network
https://arxiv.org/pdf/1409.1556.pdf

Regularisation in VGG: The training is regularised by weight decay (the L2 penalty multiplier set to 5*10^?4) and dropout regularisation 
for the first two fully-connected layers (dropout ratio set to 0.5).


ResNet:
-----
https://github.com/keras-team/keras-applications/blob/master/keras_applications/resnet50.py
https://arxiv.org/pdf/1512.03385.pdf


Inception Network:
http://www.ashukumar27.io/CNN-Inception-Network/
https://github.com/keras-team/keras-applications/blob/master/keras_applications/inception_v3.py
http://www.ashukumar27.io/assets/neuralnets/inception2_1.png

Transfer learning:
https://cs231n.github.io/transfer-learning/
https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html